#include <iostream>
#include "Eigen/Dense"
#include "Eigen/Core"
#include "functions.h"
#include <vector>
#include <cmath>
#include <cstdlib>
#include <boost/tuple/tuple.hpp>

// This must be defined before the first time that "gnuplot-iostream.h" is included.
#define GNUPLOT_ENABLE_PTY
#include "gnuplot-iostream.h"


using namespace std;
using namespace Eigen;

int main(){
    print_hello();
    cout << endl;
    cout << "The factorial of 5 is " << factorial(5) << endl;


    MatrixXf m = MatrixXf::Random(3,2);
    cout << "Here is the matrix m:" << endl << m << endl;
    JacobiSVD<MatrixXf> svd(m, ComputeThinU | ComputeThinV);
    cout << "Its singular values are:" << endl << svd.singularValues() << endl;
    cout << "Its left singular vectors are the columns of the thin U matrix:" << endl << svd.matrixU() << endl;
    cout << "Its right singular vectors are the columns of the thin V matrix:" << endl << svd.matrixV() << endl;
    Vector3f rhs(1, 0, 0);
    cout << "Now consider this rhs vector:" << endl << rhs << endl;
    cout << "A least-squares solution of m*x = rhs is:" << endl << svd.solve(rhs) << endl;


    // Test gnuplot abilities

    Gnuplot gp;

  	// // Create field of arrows at random locations.
  	// std::vector<boost::tuple<double,double,double,double> > arrows;
  	// for(size_t i=0; i<100; i++) {
  	// 	double x = rand() / double(RAND_MAX);
  	// 	double y = rand() / double(RAND_MAX);
  	// 	arrows.push_back(boost::make_tuple(x, y, 0, 0));
  	// }
    //
  	// double mx=0.5, my=0.5;
  	// int mb=1;
  	// while(mb != 3 && mb >= 0) {
  	// 	// Make the arrows point towards the mouse click.
  	// 	for(size_t i=0; i<arrows.size(); i++) {
  	// 		double x = arrows[i].get<0>();
  	// 		double y = arrows[i].get<1>();
  	// 		double dx = (mx-x) * 0.1;
  	// 		double dy = (my-y) * 0.1;
  	// 		arrows[i] = boost::make_tuple(x, y, dx, dy);
  	// 	}
    //
  	// 	gp << "plot '-' with vectors notitle\n";
  	// 	gp.send1d(arrows);
    //
  	// 	gp.getMouse(mx, my, mb, "Left click to aim arrows, right click to exit.");
  	// 	printf("You pressed mouse button %d at x=%f y=%f\n", mb, mx, my);
  	// 	if(mb < 0) printf("The gnuplot window was closed.\n");
  	// }

    return 0;
}
